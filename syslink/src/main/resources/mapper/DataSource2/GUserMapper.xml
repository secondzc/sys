<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tongyuan.gogs.dao.GUserMapper">
    <resultMap id="baseResultMap" type="com.tongyuan.gogs.domain.GUser">
        <id column="id" property="ID" jdbcType="BIGINT"  />
        <result column="lower_name" property="LowerName" jdbcType="VARCHAR"/>
        <result column="name" property="Name" jdbcType="VARCHAR"/>
        <result column="full_name" property="FullName" jdbcType="VARCHAR"/>
        <result column="email" property="Email" jdbcType="VARCHAR"/>
        <result column="passwd" property="Passwd" jdbcType="VARCHAR"/>
        <result column="login_type" property="LoginType" jdbcType="INTEGER"/>
        <result column="login_source" property="LoginSource" jdbcType="BIGINT"/>
        <result column="login_name" property="LoginName" jdbcType="VARCHAR"/>
        <result column="type" property="Type" jdbcType="INTEGER"/>
        <result column="location" property="Location" jdbcType="VARCHAR"/>
        <result column="website" property="Website" jdbcType="VARCHAR"/>
        <result column="rands" property="Rands" jdbcType="VARCHAR"/>
        <result column="salt" property="Salt" jdbcType="VARCHAR"/>
        <result column="created_unix" property="CreatedUnix" jdbcType="BIGINT"/>
        <result column="updated_unix" property="UpdatedUnix" jdbcType="BIGINT"/>
        <result column="last_repo_visibility" property="LastRepoVisibility" jdbcType="TINYINT"/>
        <!--<result column="max_repo_creation" property="MaxRepoCreation" jdbcType="TINYINT"/>-->
        <result column="max_repo_creation" property="MaxRepoCreation" jdbcType="INTEGER"/>
        <result column="is_active" property="IsActive" jdbcType="TINYINT"/>
        <result column="is_admin" property="IsAdmin" jdbcType="TINYINT"/>
        <result column="allow_git_hook" property="AllowGitHook" jdbcType="TINYINT"/>
        <result column="allow_import_local" property="AllowImportLocal" jdbcType="TINYINT"/>
        <result column="prohibit_login" property="ProhibitLogin" jdbcType="TINYINT"/>
        <result column="avatar" property="Avatar" jdbcType="VARCHAR"/>
        <result column="avatar_email" property="AvatarEmail" jdbcType="VARCHAR"/>
        <result column="use_custom_avatar" property="UseCustomAvatar" jdbcType="TINYINT"/>
        <result column="num_followers" property="NumFollowers" jdbcType="INTEGER"/>
        <result column="num_following" property="NumFollowing" jdbcType="INTEGER"/>
        <result column="num_stars" property="NumStars" jdbcType="INTEGER"/>
        <result column="num_repos" property="NumRepos" jdbcType="INTEGER"/>
        <result column="description" property="Description" jdbcType="VARCHAR"/>
        <result column="num_teams" property="NumTeams" jdbcType="INTEGER"/>
        <result column="num_members" property="NumMembers" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="mapResultMap" type="map">
        <id column="id" property="id" jdbcType="BIGINT"  />
        <id column="lower_name" property="lowerName" jdbcType="VARCHAR"  />
        <id column="name" property="name" jdbcType="VARCHAR"  />
        <id column="full_name" property="fullName" jdbcType="VARCHAR"  />
        <id column="email" property="email" jdbcType="VARCHAR"  />
        <id column="passwd" property="passwd" jdbcType="VARCHAR"  />
        <id column="login_type" property="loginType" jdbcType="INTEGER"  />
        <id column="login_source" property="loginSource" jdbcType="BIGINT"  />
        <id column="login_name" property="loginName" jdbcType="VARCHAR"  />
        <id column="type" property="type" jdbcType="INTEGER"  />
        <id column="location" property="location" jdbcType="VARCHAR"  />
        <id column="website" property="website" jdbcType="VARCHAR"  />
        <id column="rands" property="rands" jdbcType="VARCHAR"  />
        <id column="salt" property="salt" jdbcType="VARCHAR"  />
        <id column="created_unix" property="createdUnix" jdbcType="BIGINT"  />
        <id column="updated_unix" property="updatedUnix" jdbcType="BIGINT"  />
        <id column="last_repo_visibility" property="lastRepoVisibility" jdbcType="TINYINT"  />
        <id column="max_repo_creation" property="maxRepoCreation" jdbcType="INTEGER"  />
        <id column="is_active" property="isActive" jdbcType="TINYINT"  />
        <id column="is_admin" property="isAdmin" jdbcType="TINYINT"  />
        <id column="allow_git_hook" property="allowGitHook" jdbcType="TINYINT"  />
        <id column="allow_import_local" property="allowImportLocal" jdbcType="TINYINT"  />
        <id column="prohibit_login" property="prohibitLogin" jdbcType="TINYINT"  />
        <id column="avatar" property="avatar" jdbcType="VARCHAR"  />
        <id column="avatar_email" property="avatarEmail" jdbcType="VARCHAR"  />
        <id column="use_custom_avatar" property="useCustomAvatar" jdbcType="TINYINT"  />
        <id column="num_followers" property="numFollowers" jdbcType="INTEGER"  />
        <id column="num_following" property="numFollowing" jdbcType="INTEGER"  />
        <id column="num_stars" property="numStars" jdbcType="INTEGER"  />
        <id column="num_repos" property="numRepos" jdbcType="INTEGER"  />
        <id column="description" property="description" jdbcType="VARCHAR"  />
        <id column="num_teams" property="numTeams" jdbcType="INTEGER"  />
        <id column="num_members" property="numMembers" jdbcType="INTEGER"  />
    </resultMap>


    <sql id="baseColumnList" >
        id,lower_name,name,full_name,email,passwd,login_type,login_source,login_name,type,location,website,
        rands,salt,created_unix,updated_unix,last_repo_visibility,max_repo_creation,is_active,is_admin,allow_git_hook,
        allow_import_local,prohibit_login,avatar,avatar_email,use_custom_avatar,num_followers,num_following,num_stars,
        num_repos,description,num_teams,num_members
    </sql>

    <sql id="simpleColumnList" >
        id,lower_name,name,full_name,email,location,website,description
    </sql>

    <insert id="add" useGeneratedKeys="true" keyProperty="id"  parameterType="map"   >
        INSERT INTO user (id,lower_name,name,full_name,email,passwd,login_type,login_source,login_name,type,location,website,
        rands,salt,created_unix,updated_unix,last_repo_visibility,max_repo_creation,is_active,is_admin,allow_git_hook,
        allow_import_local,prohibit_login,avatar,avatar_email,use_custom_avatar,num_followers,num_following,num_stars,
        num_repos,description,num_teams,num_members) VALUES
        (#{id}, #{lowerName},#{name},#{fullName},#{email},#{passwd},#{loginType},#{loginSource},#{loginName},#{type},#{location}
        ,#{website},#{rands},#{salt},#{createdUnix},#{updatedUnix},#{lastRepoVisibility},#{maxRepoCreation},#{isActive},#{isAdmin}
        ,#{allowGitHook},#{allowImportLocal},#{prohibitLogin},#{avatar},#{avatarEmail},#{useCustomAvatar},#{numFollowers}
        ,#{numFollowing},#{numStars},#{numRepos},#{description},#{numTeams},#{numMembers})
    </insert>
    <update id="update"  parameterType="com.tongyuan.gogs.domain.GUser">
        UPDATE  user set lower_name = #{LowerName},name = #{Name},full_name = #{FullName},email = #{Email},passwd = #{Passwd},login_type = #{LoginType},login_source = #{LoginSource}
        ,type = #{Type},location = #{Location},website = #{Website},rands = #{Rands},salt = #{Salt},created_unix = #{CreatedUnix}
        ,updated_unix = #{UpdatedUnix},last_repo_visibility = #{LastRepoVisibility},max_repo_creation = #{MaxRepoCreation},is_active = #{IsActive},
        is_admin = #{IsAdmin},allow_git_hook = #{AllowGitHook} ,allow_import_local = #{AllowImportLocal},prohibit_login = #{ProhibitLogin},avatar = #{Avatar},
        avatar_email = #{AvatarEmail},use_custom_avatar = #{UseCustomAvatar},num_followers = #{NumFollowers},num_following = #{NumFollowing},
        num_stars = #{NumStars},num_repos = #{NumRepos},description = #{Description},num_teams = #{NumTeams},num_members = #{NumMembers} WHERE id = #{ID}
    </update>
    <update id="updateUser" parameterType="map">
        UPDATE USER
        <set>
            <if test="name != null">name=#{name},</if>
            <if test="lowerName != null">lower_name=#{lowerName},</if>
            <if test="fullName != null">full_name=#{fullName},</if>
            <if test="email != null">email=#{email},</if>
            <if test="passwd != null">passwd=#{passwd},</if>
            <if test="rands != null">rands=#{rands},</if>
            <if test="salt != null">salt=#{salt},</if>
            <if test="location != null">location=#{location},</if>
            <if test="website != null">website=#{website},</if>
            <if test="updatedUnix!= null">updated_unix=#{updatedUnix},</if>
            <if test="maxRepoCreation!= null">max_repo_creation=#{maxRepoCreation},</if>
            <if test="isActive != null">is_active=#{isActive},</if>
            <if test="isAdmin != null">is_admin=#{isAdmin},</if>
            <if test="allowGitHook != null">allow_git_hook=#{allowGitHook},</if>
            <if test="prohibitLogin != null">prohibit_login=#{prohibitLogin},</if>
        </set>
        WHERE id=#{id}
    </update>


    <update id="updateOrg" parameterType="map">
        UPDATE USER
        <set>
            <if test="name != null">name=#{name},</if>
            <if test="fullName != null">full_name=#{fullName},</if>
            <if test="description != null">description=#{description},</if>
            <if test="website != null">website=#{website},</if>
            <if test="location != null">location=#{location},</if>
            <if test="updatedUnix!= null">updated_unix=#{updatedUnix},</if>
            <if test="maxRepoCreation!= null">max_repo_creation=#{maxRepoCreation},</if>
            <if test="numMembers!= null">num_members=#{numMembers},</if>
        </set>
        WHERE id=#{id}
    </update>

    <delete id="delete" parameterType="long">
        delete from user where id=#{id}
    </delete>
    <select id="querListByName" resultMap="baseResultMap" resultType="com.tongyuan.gogs.domain.GUser">
        SELECT  <include refid="baseColumnList" ></include>
        FROM user
        where name = #{Name}
    </select>

    <select id="queryById" resultMap="baseResultMap" resultType="com.tongyuan.gogs.domain.GUser" parameterType="long">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE  id = #{id}
    </select>


    <select id="queryOrg" resultMap="mapResultMap" resultType="map" parameterType="map">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE type = 1
        <if test="name != null and name != ''">
            and name like CONCAT('%',#{name},'%')
        </if>
    </select>
    <select id="queryUser" resultMap="mapResultMap" resultType="map" parameterType="map">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE type = 0
        <if test="name != null and name != ''">
            and (email like CONCAT('%',#{name},'%')
            or full_name like CONCAT('%',#{name},'%')
            or name like CONCAT('%',#{name},'%'))
        </if>
    </select>

    <select id="nameJudge" resultMap="mapResultMap" resultType="map" parameterType="map">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE type = 0
        and name = #{name}
    </select>

    <select id="emailJudge" resultMap="mapResultMap" resultType="map" parameterType="map">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE type = 0
        and email = #{email}
    </select>

    <select id="querySimpleUser" resultMap="mapResultMap" resultType="map" parameterType="map">
        SELECT
        <include refid="simpleColumnList" />
        FROM USER
        WHERE type = 0
        <if test="uid !=null and uid!=''">
            and id = #{uid}
        </if>
    </select>

    <select id="queryOrgById" resultMap="mapResultMap" resultType="map" parameterType="long">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE id = #{id}
    </select>
    <select id="queryOrgByName" resultMap="mapResultMap" resultType="map" parameterType="String">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE name = #{name}
    </select>

    <select id="queryUserById" resultMap="mapResultMap" resultType="map" parameterType="long">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE  id = #{id}
    </select>

    <select id="queryUserByName" resultMap="mapResultMap" resultType="map" parameterType="String">
        SELECT
        <include refid="baseColumnList" />
        FROM USER
        WHERE name = #{name}
    </select>

    <resultMap id="reviewUserMap" type="com.tongyuan.pageModel.ReviewUserPage">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
    </resultMap>
    <select id="queryAll" resultMap="reviewUserMap">
        SELECT
        id,name
        from USER
    </select>

    <select id="queryUserByDepartId" resultMap="mapResultMap" parameterType="java.util.List">

        SELECT
        d.id,d.lower_name,d.name,d.full_name,d.email,d.passwd,d.login_type,d.login_source,d.login_name,d.type,d.location,d.website,d.
        rands,d.salt,d.created_unix,d.updated_unix,d.last_repo_visibility,d.max_repo_creation,d.is_active,d.is_admin,d.allow_git_hook,d.
        allow_import_local,d.prohibit_login,d.avatar,d.avatar_email,d.use_custom_avatar,d.num_followers,d.num_following,d.num_stars,d.
        num_repos,d.description,d.num_teams,d.num_members
        FROM
        gogs.user as d
        INNER JOIN syslink.user_depart as l
        ON d.id=l.uid
        WHERE l.depart_id in
        <foreach collection="list" index="index" item="departId" open="(" separator="," close=")">
        #{departId}
         </foreach>

    </select>




    <select id="queryUserByDirectoryAuth" resultMap="mapResultMap" parameterType="long">

        SELECT
        d.id,d.lower_name,d.name,d.full_name,d.email,d.passwd,d.login_type,d.login_source,d.login_name,d.type,d.location,d.website,d.
        rands,d.salt,d.created_unix,d.updated_unix,d.last_repo_visibility,d.max_repo_creation,d.is_active,d.is_admin,d.allow_git_hook,d.
        allow_import_local,d.prohibit_login,d.avatar,d.avatar_email,d.use_custom_avatar,d.num_followers,d.num_following,d.num_stars,d.
        num_repos,d.description,d.num_teams,d.num_members
        FROM
        gogs.user as d
        INNER JOIN syslink.directory_auth as l
        ON d.id=l.uid
        AND l.directory_id=#{directoryId}
        AND l.mode>0
     </select>


    <select id="queryUserWithOutDirectoryAuth" resultMap="mapResultMap" >


        SELECT *

        FROM (
        SELECT
        d.id,d.lower_name,d.name,d.full_name,d.email,d.passwd,d.login_type,d.login_source,d.login_name,d.type,d.location,d.website,d.
        rands,d.salt,d.created_unix,d.updated_unix,d.last_repo_visibility,d.max_repo_creation,d.is_active,d.is_admin,d.allow_git_hook,d.
        allow_import_local,d.prohibit_login,d.avatar,d.avatar_email,d.use_custom_avatar,d.num_followers,d.num_following,d.num_stars,d.
        num_repos,d.description,d.num_teams,d.num_members
        FROM
        gogs.user as d
        INNER JOIN syslink.user_depart as l
        ON d.id=l.uid
        WHERE l.depart_id in
        <foreach collection="param2" index="index" item="departId" open="(" separator="," close=")">
            #{departId}
        </foreach>
        )U


        LEFT JOIN syslink.directory_auth as l
        ON U.id=l.uid
        AND l.directory_id=#{param1}
        WHERE l.uid is NULL
    </select>


</mapper>